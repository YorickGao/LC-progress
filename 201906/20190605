Array

621. Task Scheduler
     sort the frequency array. the result is max(array.length, (c[25] - 1) * (n + 1) + 25 - i).
     e.g.
     Frame: "AXXXAXXXAXXXA"
     insert 'B': "ABXXABXXABXXA" <--- 'B' has higher frequency than the other characters, insert it first.
     insert 'E': "ABEXABEXABXXA"
     insert 'F': "ABEFABEXABFXA" <--- each time try to fill the k-1 gaps as full or evenly as possible.
     insert 'G': "ABEFABEGABFGA"
     
628. Maximum Product of Three Numbers
     use max1, max2, max3, min1 and min2. return max(min1 * min2 * max1, max1 * max2 * max3).
     
643. Maximum Average Subarray I
     easy pass.
     
661. Image Smoother
     easy pass.
     
665. Non-decreasing Array
     if(i-2<0 || nums[i-2] <= nums[i])
        nums[i-1] = nums[i].
     else 
        nums[i] = nums[i-1].
        
667. Beautiful Arrangement II
     k = 1
     {1, 2, 3, 4, 5, 6} OR {6, 5, 4, 3, 2, 1}.
     For k = 2
     {1, 6, 5, 4, 3, 2} OR {6, 1, 2, 3, 4, 5}.
     For k = 3
     {1, 6, 2, 3, 4, 5} OR {6, 1, 5, 4, 3, 2}.
     
     Notice that each time we want to increase k, we reverse the list again and again from list of size n - 1 to n - 2
     to n - 3 to.....

670. Maximum Swap
     https://leetcode.com/problems/maximum-swap/discuss/107068/Java-simple-solution-O(n)-time
     Integer.valueOf(new String(digits)): new String(digits) creates a new string based on char array digits. valueOf returns
     an Integer object holding the value of the specified String.

674. Longest Continuous Increasing Subsequence
     easy pass.
     Notice that set count to be 1, not 0.

689. Maximum Sum of 3 Non-Overlapping Subarrays
     https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/discuss/108231/
     C%2B%2BJava-DP-with-explanation-O(n)

695. Max Area of Island
     DFS
     
697. Degree of an Array
     use map to count every element and its left bound and right bound.
     map.values() returns a Collection view of the values contained in this map.
