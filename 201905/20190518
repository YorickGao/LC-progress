Dynamic Programming

221. Maximal Square:
     find the minimum of dp[i-1][j-1], dp[i-1][j] and dp[i][j-1].
     
264. Ugly Number II:
     Note that a bottom-up method is more reasonable. Use three pointers to maintain the product of 2, 3 and 5 respectively.
     
279. Perfect Squares:
     Knapsack.
     
300. Longest Increasing Subsequence:
     New DP solution O(nlogn):
     https://leetcode.com/problems/longest-increasing-subsequence/discuss/74825/Short-Java-solution-using-DP-O(n-log-n)
     
303. Range Sum Query - Immutable:
     easy pass.
     
304. Range Sum Query 2D - Immutable:
     dp[i][j] indicates the matrix sum of matrix[0][0] to matrix[i][j].
     
309. Best Time to Buy and Sell Stock with Cooldown:
     https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75930/
     Very-Easy-to-Understand-One-Pass-O(n)-Solution-with-No-Extra-Space

312. Burst Balloons:
     https://www.youtube.com/watch?v=IFNibRVgFBo
