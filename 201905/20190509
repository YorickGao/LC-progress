Binary Search

300. Longest Increasing Subsequence:
     Arrays.fill(int[] arr, int val) can fill the array with a certain value.
     
     1) O(n^2) DP solution:
     double while loop to update the LIS until dp[i] and return max value in dp[].
     
     2) O(nlogn) binary search solution:
     https://leetcode.com/problems/longest-increasing-subsequence/discuss/74824/
     JavaPython-Binary-search-O(nlogn)-time-with-explanation

315. Count of Smaller Numbers After Selfï¼š
     Arrays.asList() convert an array to arraylist.
     
     1) O(n^2) solution: same as DP solution in No.300.
     2) O(nlogn) solution: maintain a sorted array. For each iteration, find the insert position of nums[i] in the sorted
     array, then insert the nums[i] into the sorted array.
     
349. Intersection of Two Arrays:
     easy pass.

350. Intersection of Two Arrays II:
     HashMap. Notice the follow up question.
     
367. Valid Perfect Square:
     easy pass.

374. Guess Number Higher or Lower:
     easy pass.

378. Kth Smallest Element in a Sorted Matrix:
     Imagine how to do a median selection. Change your stereotype and use range to find the kth number. Regard matrix as a
     long partial unsorted array(since the top left ans right bottom elments are surely sorted). Then calculate a mid as a
     pivot to check how many elements are smaller than mid. Following steps are same as binary search.
     
